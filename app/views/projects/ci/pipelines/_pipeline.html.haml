- status = pipeline.status
- show_commit = local_assigns.fetch(:show_commit, true)
- show_branch = local_assigns.fetch(:show_branch, true)

%tr.commit
  %td.commit-link
    = render 'ci/status/badge', status: pipeline.detailed_status(current_user)

  %td
    = link_to namespace_project_pipeline_path(pipeline.project.namespace, pipeline.project, pipeline.id) do
      %span.pipeline-id ##{pipeline.id}
    %span by
    - if pipeline.user
      = user_avatar(user: pipeline.user, size: 20)
    - else
      %span.api.monospace API
    - if pipeline.latest?
      %span.label.label-success.has-tooltip{ title: 'Latest pipeline for this branch' } latest
    - if pipeline.triggered?
      %span.label.label-primary triggered
    - if pipeline.yaml_errors.present?
      %span.label.label-danger.has-tooltip{ title: "#{pipeline.yaml_errors}" } yaml invalid
    - if pipeline.builds.any?(&:stuck?)
      %span.label.label-warning stuck

  %td.branch-commit
    - if pipeline.ref && show_branch
      .icon-container
        = pipeline.tag? ? icon('tag') : icon('code-fork')
      = link_to pipeline.ref, namespace_project_commits_path(pipeline.project.namespace, pipeline.project, pipeline.ref), class: "monospace branch-name"
    - if show_commit
      .icon-container.commit-icon
        = custom_icon("icon_commit")
      = link_to pipeline.short_sha, namespace_project_commit_path(pipeline.project.namespace, pipeline.project, pipeline.sha), class: "commit-id monospace"

    %p.commit-title
      - if commit = pipeline.commit
        = author_avatar(commit, size: 20)
        = link_to_gfm truncate(commit.title, length: 60, escape: false), namespace_project_commit_path(pipeline.project.namespace, pipeline.project, commit.id), class: "commit-row-message"
      - else
        Cant find HEAD commit for this branch

  %td
    = render 'shared/mini_pipeline_graph', pipeline: pipeline, klass: 'js-mini-pipeline-graph'

  %td
    - if pipeline.duration
      %p.duration
        = custom_icon("icon_timer")
        = duration_in_numbers(pipeline.duration)
    - if pipeline.finished_at
      %p.finished-at
        = icon("calendar")
        #{time_ago_with_tooltip(pipeline.finished_at, short_format: false)}

  %td.pipeline-actions.hidden-xs
    .controls.pull-right
      - artifacts = pipeline.builds.latest.with_artifacts_not_expired
      - actions = pipeline.manual_actions
      - if artifacts.present? || actions.any?
        .btn-group.inline
          - if actions.any?
            .btn-group
              %button.dropdown-toggle.btn.btn-default.has-tooltip.js-pipeline-dropdown-manual-actions{ type: 'button', title: 'Manual pipeline', data: { toggle: 'dropdown', placement: 'top' }, 'aria-label' => 'Manual pipeline' }
                = custom_icon('icon_play')
                = icon('caret-down', 'aria-hidden' => 'true')
              %ul.dropdown-menu.dropdown-menu-align-right
                - actions.each do |build|
                  %li
                    = link_to play_namespace_project_build_path(pipeline.project.namespace, pipeline.project, build), method: :post, rel: 'nofollow' do
                      = custom_icon('icon_play')
                      %span= build.name
          - if artifacts.present?
            .btn-group
              %button.dropdown-toggle.btn.btn-default.build-artifacts.has-tooltip.js-pipeline-dropdown-download{ type: 'button', title: 'Artifacts', data: { toggle: 'dropdown', placement: 'top' }, 'aria-label' => 'Artifacts' }
                = icon("download")
                = icon('caret-down')
              %ul.dropdown-menu.dropdown-menu-align-right
                - artifacts.each do |build|
                  %li
                    = link_to download_namespace_project_build_artifacts_path(pipeline.project.namespace, pipeline.project, build), rel: 'nofollow', download: '' do
                      = icon("download")
                      %span Download '#{build.name}' artifacts

      - if can?(current_user, :update_pipeline, pipeline.project)
        .cancel-retry-btns.inline
          - if pipeline.retryable?
            = link_to retry_namespace_project_pipeline_path(pipeline.project.namespace, pipeline.project, pipeline.id), class: 'btn has-tooltip', title: 'Retry', data: { toggle: 'dropdown', placement: 'top' }, 'aria-label' => 'Retry' , method: :post do
              = icon("repeat")
          - if pipeline.cancelable?
            = link_to cancel_namespace_project_pipeline_path(pipeline.project.namespace, pipeline.project, pipeline.id), class: 'btn btn-remove has-tooltip', title: 'Cancel', data: { toggle: 'dropdown', placement: 'top' }, 'aria-label' => 'Cancel' , method: :post do
              = icon("remove")
